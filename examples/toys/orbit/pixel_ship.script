local mouse_helper = require("defrs.utils.mouse_helper")

function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
	self.impulse = vmath.vector3(0.0,0.0,0.0)
	msg.post(".", "acquire_input_focus")
	
	self.sun_position = go.get_position("sun")
	self.exhaust_playing = false
	self.direction = vmath.vector3(0.0, 1.0, 0.0)
	self.turning_speed = math.pi / 32
	self.max_speed = 10
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if self.exhaust_playing_w == false then
		particlefx.stop("/exhaust#particlefx")
		particlefx.play("/exhaust#particlefx")
		particlefx.play("/exhaust#particlefx")
		particlefx.play("/exhaust#particlefx")
		self.exhaust_playing_w = true
	end	
	if self.key_pressed_w == false then 
		particlefx.stop("/exhaust#particlefx")
		self.exhaust_playing_w = false 
	end	

	if self.exhaust_playing_s == false then
		particlefx.stop("/exhaust_forward_1#particlefx")
		particlefx.stop("/exhaust_forward_2#particlefx")		
		particlefx.play("/exhaust_forward_1#particlefx")
		particlefx.play("/exhaust_forward_2#particlefx")
		self.exhaust_playing_s = true
	end	
	if self.key_pressed_s == false then 
		particlefx.stop("/exhaust_forward_1#particlefx")
		particlefx.stop("/exhaust_forward_2#particlefx")
		self.exhaust_playing_s = false 
	end	
	
	if self.exhaust_playing_d == false then
		particlefx.stop("/exhaust_left#particlefx")
		particlefx.stop("/exhaust_left#particlefx")		
		particlefx.play("/exhaust_left#particlefx")
		particlefx.play("/exhaust_left#particlefx")
		self.exhaust_playing_d = true
	end	
	if self.key_pressed_d == false then 
		particlefx.stop("/exhaust_left#particlefx")
		particlefx.stop("/exhaust_left#particlefx")
		self.exhaust_playing_d = false 
	end		
	
	if self.exhaust_playing_a == false then
		particlefx.stop("/exhaust_right#particlefx")
		particlefx.stop("/exhaust_right#particlefx")		
		particlefx.play("/exhaust_right#particlefx")
		particlefx.play("/exhaust_right#particlefx")
		self.exhaust_playing_a = true
	end	
	if self.key_pressed_a == false then 
		particlefx.stop("/exhaust_right#particlefx")
		particlefx.stop("/exhaust_right#particlefx")
		self.exhaust_playing_a = false 
	end	
	
	self.position = go.get_position()
	
	if self.impulse.x > 0 then 
		self.impulse.x = math.min(self.impulse.x, self.max_speed) 
	else
		self.impulse.x = math.max(self.impulse.x, self.max_speed * -1) 
	end
	
	if self.impulse.y > 0 then 
		self.impulse.y = math.min(self.impulse.y, self.max_speed) 
	else
		self.impulse.y = math.max(self.impulse.y, self.max_speed * -1) 
	end	

	
	self.look_at = (math.deg(math.atan2(self.position.x - mouse_helper.mouse_x, self.position.y - mouse_helper.mouse_y)))
	
	--go.set(".", "euler.z", self.look_at * -1 - 90)
	go.set(".", "euler.z", math.atan2(self.direction.x, self.direction.y) *180/math.pi  - 90 )
	
	go.set_position(go.get_position() + self.impulse)
	
	if self.position.x < 0 - 100 then
		self.position.x = self.position.x + 1600 + 200
		go.set_position(self.position)
	end
	if self.position.x > 1600 + 100 then
		self.position.x = self.position.x - 1600 - 200
		go.set_position(self.position)		
	end
	if self.position.y < 0 - 100 then
		self.position.y = self.position.y + 800 + 200
		go.set_position(self.position)
	end
	if self.position.y > 800 + 100 then
		self.position.y = self.position.y - 800 - 200
		go.set_position(self.position)		
	end
	
	if self.impulse.x > 0 then self.impulse.x = self.impulse.x - 0.001 end
	if self.impulse.x < 0 then self.impulse.x = self.impulse.x + 0.001 end
	if self.impulse.y > 0 then self.impulse.y = self.impulse.y - 0.001 end
	if self.impulse.y < 0 then self.impulse.y = self.impulse.y + 0.001 end
	
	-- (x2-x1,y2-y1)
	-- vn(x/Length(v), y/length(v))
	
	local sun_direction = vmath.vector3(self.sun_position.x - self.position.x, self.sun_position.y - self.position.y, 0.0)
	--pprint("sun direction " .. sun_direction)
	local sun_impulse = vmath.vector3(sun_direction.x / vmath.length(sun_direction), sun_direction.y / vmath.length(sun_direction), 0.0) * 0.07
	--pprint("sun impulse " .. sun_impulse)
	self.impulse = self.impulse + sun_impulse
	
	self.key_pressed_w = false
	self.key_pressed_s = false
	self.key_pressed_a = false
	self.key_pressed_d = false	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function rotate_2d_vector(vector, theta)
	local theta_sin = math.sin(theta)
	local theta_cos = math.cos(theta)
	return vector.x * theta_cos - vector.y * theta_sin, vector.x * theta_sin + vector.y * theta_cos
end

function on_input(self, action_id, action)
	-- todo add acceleration when holding down keys
	
	if action_id == hash("w") then
		self.direction.x, self.direction.y = rotate_2d_vector(self.direction, (math.random(-1,1)) * self.turning_speed * 0.15)
		local correction = vmath.vector3(self.direction.x, self.direction.y * -1, 0.0)
		self.impulse = self.impulse +  correction * 0.25
		self.key_pressed_w = true
		pprint(self.direction)
		pprint("Impulse " .. self.impulse)
	end
	if action_id == hash("s") then
		local correction = vmath.vector3(self.direction.x, self.direction.y * -1, 0.0)
		self.impulse = self.impulse -  correction * 0.15
		self.key_pressed_s = true
		pprint(self.direction)
		pprint("Impulse " .. self.impulse)	
	end
	
	if action_id == hash("d") then
		self.direction.x, self.direction.y = rotate_2d_vector(self.direction, self.turning_speed)
		pprint(self.direction)
		self.key_pressed_d = true
		pprint("Impulse " .. self.impulse)
	end
	if action_id == hash("a") then
		self.direction.x, self.direction.y = rotate_2d_vector(self.direction, -1 * self.turning_speed)
		pprint(self.direction)
		self.key_pressed_a = true
		pprint("Impulse " .. self.impulse)
	end	

	--if self.key_pressed == false then particlefx.play("/exhaust#particlefx") end
	--pprint(self.impulse)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
