
-- set wall to a kind of shape based on what tiles exist on its sides
-- we want collisions to happen based on wall shape type
-- a wall being next to another wall changes them to have a fixture mask

local active_tilemap = "/walls#tilemap"

function setup_wall_type()
	local active_tilemap = "/walls#tilemap"
	local walls = {}
	local size = {}
	size.x, size.y, size.w, size.h = tilemap.get_bounds(active_tilemap)
	pprint(size)
	for x=1, size.w, 1 do
		for y=1, size.h, 1 do
			if tilemap.get_tile(active_tilemap, "walls", x, y) ~= 0 then
				local north, west, south, east = get_neighbors(x,y,size.w,size.h)
				pprint(north .. " " .. west .. " " .. south .. " " .. east)
				local sum = 0
				if north > 0 then sum = sum + 1 end
				if west > 0 then sum = sum + 2 end
				if south > 0 then sum = sum + 4 end
				if east > 0 then sum = sum + 8 end
				if sum == 0 then sum = 16 end
				tilemap.set_tile(active_tilemap,"walls",x,y,sum)
				print(sum)
			end
		end
	end
end

function get_neighbors(x,y,w,h)
	local north, west, south, east = 0, 0, 0, 0
	print(x .. " " .. y)
	if y + 1 <= h then
		north = tilemap.get_tile(active_tilemap, "walls", x, y + 1)
	end
	if x - 1 > 0 then
		west = tilemap.get_tile(active_tilemap, "walls", x - 1, y)
	end
	if y - 1 > 0 then
		south = tilemap.get_tile(active_tilemap, "walls", x, y - 1)
	end
	if x + 1 <= w then
		east = tilemap.get_tile(active_tilemap, "walls", x + 1, y)
	end
	
	return north, west, south, east
end

function is_wall(tile_x, tile_y)
	
	local active_tile = tilemap.get_tile(active_tilemap, "walls", tile_x, tile_y)
	return (active_tile > 0)
end

function near_center(x,y)
	local tile_size = 32
	local tile_quarter = tile_size / 4
	return (x > tile_quarter and x < tile_size - tile_quarter and y > tile_quarter and y < tile_size - tile_quarter)
end

-- for bullet check if over tile then check if bullet is near enough to the center of the wall


function init(self)
	self.wall_types = setup_wall_type()
	-- Add initialization code here
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
