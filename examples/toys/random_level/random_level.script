local level_id = "/go#tilemap"
local number_of_gen_blocks = 5
local target_level_size = 1024


function clear_level(id)
	local x,y,w,h = tilemap.get_bounds(id)
	for i=1, w, 1 do
		for h=1, h, 1 do
			tilemap.set_tile(id,"layer1",i,h,1)
		end
	end
end

function init_starter_blocks(number, level_center_x, level_center_y)
	math.random(); math.random(); math.random()
	local blocks = {}
	for i=1, number, 1 do
		blocks[i] = {type = math.random(1,3), position_x = level_center_x, position_y = level_center_y}
	end
	return blocks
end

function tile_get(x,y, self)
	local return_value = nil
	if x < 1 or y < 1 then 
		return_value = 1
	end
	if x > self.level_width or y > self.level_height then 
		return_value = 1
	end
	return_value = return_value or tilemap.get_tile(level_id,"layer1",x,y)
	return return_value
end

function tile_set(x,y,value)
	tilemap.set_tile(level_id,"layer1",x,y,value)
end

function generate_level(target_size, self)
	local map_size = 0
	while map_size < target_size do
		for i=1, #self.blocks, 1 do
			local random_x = math.random(2, self.level_width - 1)
			local random_y = math.random(2, self.level_height - 1)
			if map_size == target_size then break end
			
			local diagonal_count = 0
			if (tile_get(random_x+1,random_y+1, self) == 0) then
				diagonal_count = diagonal_count + 1
			end
			if (tile_get(random_x-1,random_y-1, self) == 0) then
				diagonal_count = diagonal_count + 1
			end				
			if (tile_get(random_x+1,random_y-1, self) == 0) then
				diagonal_count = diagonal_count + 1
			end					
			if (tile_get(random_x-1,random_y+1, self) == 0) then
				diagonal_count = diagonal_count + 1
			end

			--print(diagonal_count)				
			
			local cardinal_count = 0
			if diagonal_count == 0 or diagonal_count == 1 then
				if (tile_get(random_x+1,random_y, self) == 0) then
					cardinal_count = cardinal_count + 1
				end
				if (tile_get(random_x,random_y+1, self) == 0) then
					cardinal_count = cardinal_count + 1
				end				
				if (tile_get(random_x-1,random_y, self) == 0) then
					cardinal_count = cardinal_count + 1
				end					
				if (tile_get(random_x,random_y-1, self) == 0) then
					cardinal_count = cardinal_count + 1
				end
				
				if cardinal_count >= 1 then
					tile_set(random_x, random_y, 0)
					map_size = map_size + 1
					
					-- do extra stuff to this cell
					
				end

							
			end
			
			
			
		end
		--print(map_size)
	end
	-- finalize map such as placing doodads randomly in open spots
end

function random_level(self)
	
	clear_level(level_id)
	_,_,self.level_width,self.level_height = tilemap.get_bounds(level_id)
	self.blocks = init_starter_blocks(number_of_gen_blocks, math.floor(self.level_width / 2), math.floor(self.level_height / 2))
	tilemap.set_tile(level_id,"layer1",math.floor(self.level_width / 2),math.floor(self.level_height / 2),0)
	generate_level(target_level_size, self)	
end

function init(self)
	math.randomseed(os.time()); math.random(); math.random(); math.random()
	msg.post(".", "acquire_input_focus")
	random_level(self)

end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		random_level(self)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
